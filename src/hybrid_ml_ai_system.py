"""
ü§ñüß† HYBRID ML-AI SYSTEM - INT√âGRATION COMPL√àTE
Syst√®me hybride qui combine nos 180 mod√®les ML sp√©cialis√©s avec l'intelligence GPT
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional
import json
from pathlib import Path
import sys
import os

# Ajouter le dossier parent au path pour les imports
sys.path.append(str(Path(__file__).parent.parent))
from config import config

# Imports de nos composants ML existants
from intelligent_betting_coupon import IntelligentBettingCoupon
from portfolio_optimization_engine import AdvancedPortfolioOptimizer
from confidence_scoring_engine import AdvancedConfidenceScorer
from realtime_recalibration_engine import RealtimeRecalibrationEngine

# Import de la nouvelle couche IA
from ai_enhancement_layer import AIEnhancementLayer, AIPredictionExplanation

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class HybridMLAIPredictor:
    """Pr√©dicteur hybride ML + IA"""
    
    def __init__(self, openai_api_key: str = None):
        """
        Initialiser le syst√®me hybride
        
        Args:
            openai_api_key: Cl√© API OpenAI (optionnel, utilise .env par d√©faut)
        """
        # Utiliser la configuration depuis .env si pas de cl√© fournie
        if openai_api_key is None:
            if not config.validate_ai_config():
                logger.warning("Configuration IA invalide, mode fallback activ√©")
                self.ai_enabled = False
            else:
                openai_api_key = config.OPENAI_API_KEY
                self.ai_enabled = config.AI_ENABLED
        else:
            self.ai_enabled = True
        # ===== COMPOSANTS ML EXISTANTS (C≈íUR DU SYST√àME) =====
        self.coupon_generator = IntelligentBettingCoupon()
        self.portfolio_optimizer = AdvancedPortfolioOptimizer()
        self.confidence_scorer = AdvancedConfidenceScorer()
        self.recalibration_engine = RealtimeRecalibrationEngine()
        
        # ===== NOUVELLE COUCHE IA (ENHANCEMENT) =====
        if self.ai_enabled and openai_api_key:
            self.ai_layer = AIEnhancementLayer(openai_api_key, config.OPENAI_MODEL)
        else:
            self.ai_layer = None
        
        # Configuration du syst√®me hybride depuis .env
        self.ai_fallback = config.AI_FALLBACK_ENABLED
        
        logger.info("ü§ñüß† Syst√®me Hybride ML-IA initialis√©")
    
    async def predict_with_ai_enhancement(self, match_data: Dict, team_stats: Dict, 
                                        market_odds: List[Dict] = None) -> Dict[str, Any]:
        """
        Pr√©diction compl√®te avec enhancement IA
        
        Args:
            match_data: Donn√©es du match
            team_stats: Statistiques des √©quipes
            market_odds: Cotes du march√© (optionnel)
            
        Returns:
            Pr√©diction enrichie ML + IA
        """
        prediction_start = datetime.now()
        
        try:
            logger.info(f"üéØ Pr√©diction hybride pour match {match_data.get('match_id', 'N/A')}")
            
            # ===== √âTAPE 1: ENHANCEMENT DES FEATURES PAR IA =====
            ai_features = {}
            confidence_boost = 0.0
            
            if self.ai_enabled and self.ai_layer:
                try:
                    enhanced_features = await self.ai_layer.feature_enhancer.enhance_features(
                        match_data, team_stats
                    )
                    ai_features = enhanced_features.ai_features
                    confidence_boost = enhanced_features.confidence_boost
                    logger.info(f"‚úÖ Features enrichies par IA: +{confidence_boost}% confiance")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è IA features indisponible: {e}")
                    if not self.ai_fallback:
                        raise
            
            # ===== √âTAPE 2: PR√âDICTION ML AVEC FEATURES ENRICHIES =====
            # Combiner features originales + IA
            enhanced_team_stats = {**team_stats, **ai_features}
            
            # Nos mod√®les ML font la pr√©diction (syst√®me existant)
            ml_prediction = await self._generate_ml_prediction(match_data, enhanced_team_stats)
            
            # Appliquer le boost de confiance IA
            if confidence_boost > 0:
                ml_prediction['confidence'] = min(95, ml_prediction['confidence'] + confidence_boost)
                ml_prediction['ai_enhanced'] = True
            
            logger.info(f"üß† Pr√©diction ML: {ml_prediction['prediction_value']} ({ml_prediction['confidence']:.1f}%)")
            
            # ===== √âTAPE 3: EXPLICATION IA DE LA PR√âDICTION =====
            ai_explanation = None
            if self.ai_enabled:
                try:
                    ai_explanation = await self.ai_layer.prediction_explainer.explain_prediction(
                        ml_prediction, match_data
                    )
                    logger.info("‚úÖ Explication IA g√©n√©r√©e")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Explication IA indisponible: {e}")
            
            # ===== √âTAPE 4: ANALYSE VALUE BETTING IA =====
            value_analysis = None
            if self.ai_enabled and market_odds:
                try:
                    value_analysis = await self.ai_layer.value_detector.detect_value_opportunities(
                        [ml_prediction], market_odds
                    )
                    logger.info(f"üí∞ Value betting: {len(value_analysis.get('value_opportunities', []))} opportunit√©s")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Value betting IA indisponible: {e}")
            
            # ===== R√âSULTAT HYBRIDE FINAL =====
            processing_time = (datetime.now() - prediction_start).total_seconds()
            
            result = {
                # Pr√©diction ML (c≈ìur du syst√®me)
                "ml_prediction": ml_prediction,
                
                # Enrichissements IA
                "ai_enhanced_features": ai_features,
                "ai_explanation": ai_explanation,
                "value_opportunities": value_analysis,
                
                # M√©ta-informations
                "confidence_boost": confidence_boost,
                "ai_enabled": self.ai_enabled,
                "processing_time": processing_time,
                "prediction_timestamp": datetime.now().isoformat(),
                
                # Qualit√© de la pr√©diction
                "prediction_quality": self._assess_prediction_quality(ml_prediction, ai_explanation)
            }
            
            logger.info(f"üéâ Pr√©diction hybride termin√©e en {processing_time:.2f}s")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur pr√©diction hybride: {e}")
            
            # Fallback: pr√©diction ML pure si IA √©choue
            if self.ai_fallback:
                ml_prediction = await self._generate_ml_prediction(match_data, team_stats)
                return {
                    "ml_prediction": ml_prediction,
                    "ai_enhanced_features": {},
                    "ai_explanation": None,
                    "value_opportunities": None,
                    "confidence_boost": 0.0,
                    "ai_enabled": False,
                    "error": str(e),
                    "fallback_mode": True
                }
            else:
                raise
    
    async def _generate_ml_prediction(self, match_data: Dict, team_stats: Dict) -> Dict[str, Any]:
        """
        G√©n√©rer une pr√©diction avec nos mod√®les ML
        (Simulation - remplacer par vraie logique des 180 mod√®les)
        """
        # TODO: Remplacer par l'appel √† revolutionary_model_architecture.py
        # qui contient nos 180 mod√®les sp√©cialis√©s
        
        import random
        prediction_types = ["match_result", "total_goals", "both_teams_scored"]
        prediction_values = {
            "match_result": ["1", "X", "2"],
            "total_goals": ["Under 2.5", "Over 2.5"], 
            "both_teams_scored": ["Yes", "No"]
        }
        
        pred_type = random.choice(prediction_types)
        pred_value = random.choice(prediction_values[pred_type])
        
        # Simuler nos mod√®les ML
        base_confidence = random.uniform(65, 85)
        
        return {
            "prediction_type": pred_type,
            "prediction_value": pred_value,
            "confidence": base_confidence,
            "odds": random.uniform(1.5, 4.0),
            "expected_value": random.uniform(0.05, 0.25),
            "model_used": "ensemble_revolutionary_180_models",
            "league": match_data.get("league", "unknown"),
            "match_id": match_data.get("match_id", "unknown")
        }
    
    def _assess_prediction_quality(self, ml_prediction: Dict, ai_explanation: Optional[AIPredictionExplanation]) -> str:
        """√âvaluer la qualit√© globale de la pr√©diction"""
        confidence = ml_prediction.get("confidence", 0)
        has_ai_explanation = ai_explanation is not None
        
        if confidence >= 80 and has_ai_explanation:
            return "excellent"
        elif confidence >= 70 and has_ai_explanation:
            return "very_good"
        elif confidence >= 70:
            return "good"
        elif confidence >= 60:
            return "moderate"
        else:
            return "low_confidence"

class HybridIntelligentCoupon:
    """G√©n√©rateur de coupons intelligents avec IA"""
    
    def __init__(self, openai_api_key: str):
        self.hybrid_predictor = HybridMLAIPredictor(openai_api_key)
        self.portfolio_optimizer = AdvancedPortfolioOptimizer()
    
    async def generate_ai_enhanced_coupon(self, matches_data: List[Dict], 
                                        user_config: Dict, market_odds_data: List[Dict] = None) -> Dict[str, Any]:
        """
        G√©n√©rer un coupon intelligent enrichi par l'IA
        
        Args:
            matches_data: Liste des matchs disponibles
            user_config: Configuration utilisateur (risk_profile, budget, etc.)
            market_odds_data: Cotes du march√© pour chaque match
            
        Returns:
            Coupon optimis√© ML + IA
        """
        coupon_start = datetime.now()
        logger.info(f"üéØ G√©n√©ration coupon IA pour {len(matches_data)} matchs")
        
        ai_enhanced_predictions = []
        
        # ===== PR√âDICTIONS HYBRIDES POUR CHAQUE MATCH =====
        for i, match_data in enumerate(matches_data):
            try:
                # Obtenir cotes march√© pour ce match si disponibles
                match_odds = None
                if market_odds_data and i < len(market_odds_data):
                    match_odds = [market_odds_data[i]]
                
                # Simuler team stats (remplacer par vraies donn√©es)
                team_stats = self._get_team_stats(match_data)
                
                # Pr√©diction hybride ML + IA
                prediction = await self.hybrid_predictor.predict_with_ai_enhancement(
                    match_data, team_stats, match_odds
                )
                
                ai_enhanced_predictions.append(prediction)
                
            except Exception as e:
                logger.error(f"Erreur pr√©diction match {i}: {e}")
                continue
        
        # ===== S√âLECTION ET OPTIMISATION DES PR√âDICTIONS =====
        # Filtrer par confiance minimum
        min_confidence = user_config.get("min_confidence", 70)
        qualified_predictions = [
            p for p in ai_enhanced_predictions 
            if p["ml_prediction"]["confidence"] >= min_confidence
        ]
        
        logger.info(f"üìä {len(qualified_predictions)}/{len(ai_enhanced_predictions)} pr√©dictions qualifi√©es")
        
        # S√©lectionner les meilleures selon configuration utilisateur
        selected_predictions = self._select_best_predictions(
            qualified_predictions, user_config
        )
        
        # ===== OPTIMISATION PORTFOLIO =====
        # Convertir pour l'optimiseur de portfolio
        betting_predictions = self._convert_to_betting_predictions(selected_predictions)
        
        if betting_predictions:
            portfolio = self.portfolio_optimizer.optimize_portfolio_markowitz(
                betting_predictions, objective="max_sharpe"
            )
        else:
            portfolio = {"allocation": [], "expected_return": 0, "risk": 0}
        
        # ===== COMPILATION DES EXPLICATIONS IA =====
        ai_explanations = []
        for pred in selected_predictions:
            if pred.get("ai_explanation"):
                ai_explanations.append({
                    "match": f"{pred['ml_prediction'].get('match_id', 'N/A')}",
                    "explanation": pred["ai_explanation"]
                })
        
        # ===== ANALYSE VALUE BETTING GLOBALE =====
        total_value_opportunities = []
        for pred in selected_predictions:
            if pred.get("value_opportunities") and pred["value_opportunities"].get("value_opportunities"):
                total_value_opportunities.extend(pred["value_opportunities"]["value_opportunities"])
        
        # ===== R√âSULTAT FINAL =====
        processing_time = (datetime.now() - coupon_start).total_seconds()
        
        coupon_result = {
            "coupon_id": f"ai_coupon_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "user_config": user_config,
            
            # Pr√©dictions s√©lectionn√©es
            "selected_predictions": selected_predictions,
            "total_predictions": len(selected_predictions),
            
            # Optimisation portfolio
            "portfolio_allocation": portfolio["allocation"] if "allocation" in portfolio else [],
            "expected_return": portfolio.get("expected_return", 0),
            "portfolio_risk": portfolio.get("risk", 0),
            
            # Enrichissements IA
            "ai_explanations": ai_explanations,
            "value_opportunities": total_value_opportunities,
            "ai_features_used": sum(1 for p in selected_predictions if p.get("ai_enhanced_features")),
            
            # M√©ta-informations
            "average_confidence": sum(p["ml_prediction"]["confidence"] for p in selected_predictions) / len(selected_predictions) if selected_predictions else 0,
            "confidence_boost_total": sum(p.get("confidence_boost", 0) for p in selected_predictions),
            "processing_time": processing_time,
            "generation_timestamp": datetime.now().isoformat(),
            
            # Qualit√© du coupon
            "coupon_quality": self._assess_coupon_quality(selected_predictions, ai_explanations)
        }
        
        logger.info(f"üéâ Coupon IA g√©n√©r√©: {len(selected_predictions)} pr√©dictions, qualit√© {coupon_result['coupon_quality']}")
        return coupon_result
    
    def _get_team_stats(self, match_data: Dict) -> Dict[str, float]:
        """Simuler les statistiques d'√©quipe (remplacer par vraies donn√©es)"""
        import random
        return {
            "home_goals_avg": random.uniform(1.2, 2.8),
            "away_goals_avg": random.uniform(1.0, 2.5),
            "home_possession": random.uniform(0.45, 0.65),
            "away_possession": random.uniform(0.35, 0.55),
            "home_shots_avg": random.uniform(12, 20),
            "away_shots_avg": random.uniform(10, 18)
        }
    
    def _select_best_predictions(self, predictions: List[Dict], config: Dict) -> List[Dict]:
        """S√©lectionner les meilleures pr√©dictions selon la configuration"""
        max_predictions = config.get("max_predictions", 8)
        risk_profile = config.get("risk_profile", "balanced")
        
        # Trier par confiance + value (si disponible)
        def prediction_score(p):
            base_score = p["ml_prediction"]["confidence"]
            
            # Bonus si value betting d√©tect√©
            if p.get("value_opportunities") and p["value_opportunities"].get("value_opportunities"):
                base_score += 5
            
            # Bonus si explications IA disponibles
            if p.get("ai_explanation"):
                base_score += 3
            
            # Ajustement selon profil de risque
            if risk_profile == "conservative":
                # Privil√©gier haute confiance, faible variance
                if p["ml_prediction"]["confidence"] > 80:
                    base_score += 10
            elif risk_profile == "aggressive":
                # Privil√©gier value, m√™me avec confiance mod√©r√©e
                if p.get("value_opportunities"):
                    base_score += 15
            
            return base_score
        
        # Trier et s√©lectionner
        sorted_predictions = sorted(predictions, key=prediction_score, reverse=True)
        return sorted_predictions[:max_predictions]
    
    def _convert_to_betting_predictions(self, ai_predictions: List[Dict]) -> List[Any]:
        """Convertir les pr√©dictions IA en format pour portfolio optimizer"""
        # Simulation - remplacer par vraie conversion
        return []  # TODO: Impl√©menter conversion
    
    def _assess_coupon_quality(self, predictions: List[Dict], ai_explanations: List[Dict]) -> str:
        """√âvaluer la qualit√© globale du coupon"""
        if not predictions:
            return "empty"
        
        avg_confidence = sum(p["ml_prediction"]["confidence"] for p in predictions) / len(predictions)
        ai_coverage = len(ai_explanations) / len(predictions)
        
        if avg_confidence >= 80 and ai_coverage >= 0.8:
            return "premium"
        elif avg_confidence >= 75 and ai_coverage >= 0.6:
            return "excellent"
        elif avg_confidence >= 70 and ai_coverage >= 0.4:
            return "very_good"
        elif avg_confidence >= 65:
            return "good"
        else:
            return "standard"

# Fonction de test
async def test_hybrid_system():
    """Tester le syst√®me hybride ML-IA"""
    print("ü§ñüß† Test Syst√®me Hybride ML-IA")
    
    # ‚ö†Ô∏è Remplacer par votre vraie cl√© API OpenAI
    API_KEY = "your-openai-api-key"
    
    if API_KEY == "your-openai-api-key":
        print("‚ùå Veuillez d√©finir votre cl√© API OpenAI")
        return
    
    # Initialiser le syst√®me hybride
    coupon_generator = HybridIntelligentCoupon(API_KEY)
    
    # Donn√©es de test
    matches_data = [
        {"match_id": 1, "home_team": "Manchester United", "away_team": "Liverpool", "league": "Premier League"},
        {"match_id": 2, "home_team": "Barcelona", "away_team": "Real Madrid", "league": "La Liga"},
        {"match_id": 3, "home_team": "Bayern Munich", "away_team": "Dortmund", "league": "Bundesliga"}
    ]
    
    user_config = {
        "risk_profile": "balanced",
        "min_confidence": 70,
        "max_predictions": 5,
        "budget": 500
    }
    
    # Test g√©n√©ration coupon hybride
    coupon = await coupon_generator.generate_ai_enhanced_coupon(matches_data, user_config)
    
    print(f"‚úÖ Coupon hybride g√©n√©r√©:")
    print(f"- Pr√©dictions: {coupon['total_predictions']}")
    print(f"- Confiance moyenne: {coupon['average_confidence']:.1f}%")
    print(f"- Features IA utilis√©es: {coupon['ai_features_used']}")
    print(f"- Explications IA: {len(coupon['ai_explanations'])}")
    print(f"- Qualit√©: {coupon['coupon_quality']}")

if __name__ == "__main__":
    # Pour tester, d√©commenter et d√©finir votre cl√© API
    # asyncio.run(test_hybrid_system())
    print("ü§ñüß† Syst√®me Hybride ML-IA pr√™t - D√©finir la cl√© API pour utiliser")