#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
REVOLUTIONARY MODEL ARCHITECTURE - PHASE 2 TRANSFORMATION
Architecture modulaire pour 180+ mod√®les sp√©cialis√©s football
6 ligues √ó 30 pr√©dictions avec IA avanc√©e
"""

import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Tuple, Union, Any
from dataclasses import dataclass, field
from datetime import datetime
import logging
from pathlib import Path
import joblib
from abc import ABC, abstractmethod
import warnings
warnings.filterwarnings('ignore')

# Imports ML avanc√©s
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder
import xgboost as xgb
import lightgbm as lgb

try:
    import catboost as cb
except ImportError:
    cb = None
    logger.warning("CatBoost non disponible - Utilisation XGBoost/LightGBM seulement")

from config import config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class PredictionType:
    """D√©finition d'un type de pr√©diction"""
    name: str
    category: str  # 'result', 'goals', 'events', 'players', 'special'
    task_type: str  # 'classification', 'regression'
    target_column: str
    classes: Optional[List] = None  # Pour classification
    min_value: Optional[float] = None  # Pour r√©gression
    max_value: Optional[float] = None
    description: str = ""
    priority: int = 1  # 1=haute, 2=moyenne, 3=basse

@dataclass
class ModelPerformance:
    """Performance d'un mod√®le"""
    model_id: str
    prediction_type: str
    league: str
    algorithm: str
    accuracy: float = 0.0
    precision: float = 0.0
    recall: float = 0.0
    f1_score: float = 0.0
    rmse: float = 0.0
    r2_score: float = 0.0
    training_time: float = 0.0
    prediction_time: float = 0.0
    data_points: int = 0
    last_updated: datetime = field(default_factory=datetime.now)

class BaseMLModel(ABC):
    """Classe de base pour tous les mod√®les ML"""
    
    def __init__(self, model_id: str, prediction_type: PredictionType, league: str):
        self.model_id = model_id
        self.prediction_type = prediction_type
        self.league = league
        self.model = None
        self.is_trained = False
        self.feature_names = []
        self.performance = ModelPerformance(
            model_id=model_id,
            prediction_type=prediction_type.name,
            league=league,
            algorithm=self.__class__.__name__
        )
    
    @abstractmethod
    def create_model(self) -> Any:
        """Cr√©er l'instance du mod√®le ML"""
        pass
    
    @abstractmethod
    def train(self, X: pd.DataFrame, y: pd.Series) -> Dict:
        """Entra√Æner le mod√®le"""
        pass
    
    @abstractmethod
    def predict(self, X: pd.DataFrame) -> np.ndarray:
        """Faire des pr√©dictions"""
        pass
    
    def predict_proba(self, X: pd.DataFrame) -> np.ndarray:
        """Pr√©dictions de probabilit√© (classification seulement)"""
        if hasattr(self.model, 'predict_proba') and self.prediction_type.task_type == 'classification':
            return self.model.predict_proba(X)
        return None
    
    def save_model(self, path: Path) -> None:
        """Sauvegarder le mod√®le"""
        model_data = {
            'model': self.model,
            'model_id': self.model_id,
            'prediction_type': self.prediction_type,
            'league': self.league,
            'is_trained': self.is_trained,
            'feature_names': self.feature_names,
            'performance': self.performance
        }
        joblib.dump(model_data, path)
        logger.debug(f"üíæ Mod√®le sauvegard√©: {path}")
    
    def load_model(self, path: Path) -> bool:
        """Charger un mod√®le sauvegard√©"""
        try:
            model_data = joblib.load(path)
            self.model = model_data['model']
            self.is_trained = model_data['is_trained']
            self.feature_names = model_data['feature_names']
            self.performance = model_data['performance']
            return True
        except Exception as e:
            logger.error(f"‚ùå Erreur chargement mod√®le {path}: {e}")
            return False

class AdvancedRandomForestModel(BaseMLModel):
    """Random Forest optimis√© pour football"""
    
    def create_model(self) -> Union[RandomForestClassifier, RandomForestRegressor]:
        """Cr√©er Random Forest optimis√©"""
        params = {
            'n_estimators': 200,  # Plus d'arbres pour stabilit√©
            'max_depth': 15,      # Profondeur contr√¥l√©e
            'min_samples_split': 10,
            'min_samples_leaf': 5,
            'max_features': 'sqrt',
            'random_state': config.RANDOM_STATE,
            'n_jobs': -1,         # Parall√©lisation
            'class_weight': 'balanced' if self.prediction_type.task_type == 'classification' else None
        }
        
        if self.prediction_type.task_type == 'classification':
            return RandomForestClassifier(**{k: v for k, v in params.items() if k != 'class_weight' or v is not None})
        else:
            return RandomForestRegressor(**{k: v for k, v in params.items() if k != 'class_weight'})
    
    def train(self, X: pd.DataFrame, y: pd.Series) -> Dict:
        """Entra√Ænement Random Forest avec validation"""
        start_time = datetime.now()
        
        self.model = self.create_model()
        self.feature_names = list(X.columns)
        
        # Entra√Ænement
        self.model.fit(X, y)
        
        # Validation crois√©e
        cv_scores = cross_val_score(self.model, X, y, cv=5, n_jobs=-1)
        
        # M√©triques sur set complet (pour r√©f√©rence)
        y_pred = self.model.predict(X)
        
        training_time = (datetime.now() - start_time).total_seconds()
        
        # Mise √† jour performance
        self.performance.training_time = training_time
        self.performance.data_points = len(X)
        
        if self.prediction_type.task_type == 'classification':
            self.performance.accuracy = accuracy_score(y, y_pred)
            self.performance.precision = precision_score(y, y_pred, average='weighted', zero_division=0)
            self.performance.recall = recall_score(y, y_pred, average='weighted', zero_division=0)
            self.performance.f1_score = f1_score(y, y_pred, average='weighted', zero_division=0)
        else:
            self.performance.rmse = np.sqrt(mean_squared_error(y, y_pred))
            self.performance.r2_score = r2_score(y, y_pred)
        
        self.is_trained = True
        
        return {
            'algorithm': 'RandomForest',
            'training_time': training_time,
            'cv_scores': cv_scores,
            'cv_mean': cv_scores.mean(),
            'cv_std': cv_scores.std(),
            'performance': self.performance
        }
    
    def predict(self, X: pd.DataFrame) -> np.ndarray:
        """Pr√©dictions Random Forest"""
        if not self.is_trained:
            raise ValueError(f"Mod√®le {self.model_id} non entra√Æn√©")
        return self.model.predict(X)

class AdvancedXGBoostModel(BaseMLModel):
    """XGBoost optimis√© pour football"""
    
    def create_model(self) -> Union[xgb.XGBClassifier, xgb.XGBRegressor]:
        """Cr√©er XGBoost optimis√©"""
        params = {
            'n_estimators': 300,
            'max_depth': 8,
            'learning_rate': 0.1,
            'subsample': 0.8,
            'colsample_bytree': 0.8,
            'reg_alpha': 0.1,      # L1 regularization
            'reg_lambda': 0.1,     # L2 regularization
            'random_state': config.RANDOM_STATE,
            'n_jobs': -1,
            'verbosity': 0
        }
        
        if self.prediction_type.task_type == 'classification':
            return xgb.XGBClassifier(**params)
        else:
            return xgb.XGBRegressor(**params)
    
    def train(self, X: pd.DataFrame, y: pd.Series) -> Dict:
        """Entra√Ænement XGBoost avec early stopping"""
        start_time = datetime.now()
        
        # Split pour early stopping
        X_train, X_val, y_train, y_val = train_test_split(
            X, y, test_size=0.2, random_state=config.RANDOM_STATE, stratify=y if self.prediction_type.task_type == 'classification' else None
        )
        
        self.model = self.create_model()
        self.feature_names = list(X.columns)
        
        # Entra√Ænement avec early stopping
        eval_set = [(X_val, y_val)]
        self.model.fit(
            X_train, y_train,
            eval_set=eval_set,
            early_stopping_rounds=50,
            verbose=False
        )
        
        # Pr√©dictions validation
        y_pred_train = self.model.predict(X_train)
        y_pred_val = self.model.predict(X_val)
        
        training_time = (datetime.now() - start_time).total_seconds()
        
        # Mise √† jour performance
        self.performance.training_time = training_time
        self.performance.data_points = len(X)
        
        if self.prediction_type.task_type == 'classification':
            self.performance.accuracy = accuracy_score(y_val, y_pred_val)
            self.performance.precision = precision_score(y_val, y_pred_val, average='weighted', zero_division=0)
            self.performance.recall = recall_score(y_val, y_pred_val, average='weighted', zero_division=0)
            self.performance.f1_score = f1_score(y_val, y_pred_val, average='weighted', zero_division=0)
        else:
            self.performance.rmse = np.sqrt(mean_squared_error(y_val, y_pred_val))
            self.performance.r2_score = r2_score(y_val, y_pred_val)
        
        self.is_trained = True
        
        return {
            'algorithm': 'XGBoost',
            'training_time': training_time,
            'best_iteration': self.model.best_iteration,
            'performance': self.performance,
            'feature_importance': dict(zip(self.feature_names, self.model.feature_importances_))
        }
    
    def predict(self, X: pd.DataFrame) -> np.ndarray:
        """Pr√©dictions XGBoost"""
        if not self.is_trained:
            raise ValueError(f"Mod√®le {self.model_id} non entra√Æn√©")
        return self.model.predict(X)

class AdvancedLightGBMModel(BaseMLModel):
    """LightGBM optimis√© pour football"""
    
    def create_model(self) -> Union[lgb.LGBMClassifier, lgb.LGBMRegressor]:
        """Cr√©er LightGBM optimis√©"""
        params = {
            'n_estimators': 500,
            'max_depth': 10,
            'learning_rate': 0.05,
            'num_leaves': 64,
            'subsample': 0.8,
            'colsample_bytree': 0.8,
            'reg_alpha': 0.1,
            'reg_lambda': 0.1,
            'random_state': config.RANDOM_STATE,
            'n_jobs': -1,
            'verbosity': -1
        }
        
        if self.prediction_type.task_type == 'classification':
            return lgb.LGBMClassifier(**params)
        else:
            return lgb.LGBMRegressor(**params)
    
    def train(self, X: pd.DataFrame, y: pd.Series) -> Dict:
        """Entra√Ænement LightGBM avec validation"""
        start_time = datetime.now()
        
        # Split pour validation
        X_train, X_val, y_train, y_val = train_test_split(
            X, y, test_size=0.2, random_state=config.RANDOM_STATE, stratify=y if self.prediction_type.task_type == 'classification' else None
        )
        
        self.model = self.create_model()
        self.feature_names = list(X.columns)
        
        # Entra√Ænement avec early stopping
        self.model.fit(
            X_train, y_train,
            eval_set=[(X_val, y_val)],
            callbacks=[lgb.early_stopping(50), lgb.log_evaluation(0)]
        )
        
        # Validation
        y_pred_val = self.model.predict(X_val)
        
        training_time = (datetime.now() - start_time).total_seconds()
        
        # Performance
        self.performance.training_time = training_time
        self.performance.data_points = len(X)
        
        if self.prediction_type.task_type == 'classification':
            self.performance.accuracy = accuracy_score(y_val, y_pred_val)
            self.performance.precision = precision_score(y_val, y_pred_val, average='weighted', zero_division=0)
            self.performance.recall = recall_score(y_val, y_pred_val, average='weighted', zero_division=0)
            self.performance.f1_score = f1_score(y_val, y_pred_val, average='weighted', zero_division=0)
        else:
            self.performance.rmse = np.sqrt(mean_squared_error(y_val, y_pred_val))
            self.performance.r2_score = r2_score(y_val, y_pred_val)
        
        self.is_trained = True
        
        return {
            'algorithm': 'LightGBM',
            'training_time': training_time,
            'best_iteration': self.model.best_iteration_,
            'performance': self.performance
        }
    
    def predict(self, X: pd.DataFrame) -> np.ndarray:
        """Pr√©dictions LightGBM"""
        if not self.is_trained:
            raise ValueError(f"Mod√®le {self.model_id} non entra√Æn√©")
        return self.model.predict(X)

class RevolutionaryModelArchitecture:
    """
    Architecture de mod√®les r√©volutionnaire
    6 ligues √ó 30 pr√©dictions √ó 3 algorithmes = 540 mod√®les potentiels
    S√©lection intelligente des meilleurs pour chaque contexte
    """
    
    def __init__(self):
        # Configuration 30 types de pr√©dictions r√©volutionnaires
        self.prediction_types = self._define_prediction_types()
        
        # Ligues support√©es
        self.leagues = {
            'Premier_League': 39,
            'La_Liga': 140, 
            'Ligue_1': 61,
            'Bundesliga': 78,
            'Champions_League': 2,
            'Europa_League': 3
        }
        
        # Algorithmes disponibles
        self.available_algorithms = {
            'RandomForest': AdvancedRandomForestModel,
            'XGBoost': AdvancedXGBoostModel,
            'LightGBM': AdvancedLightGBMModel,
        }
        
        # Storage des mod√®les
        self.models: Dict[str, BaseMLModel] = {}
        self.league_specialists: Dict[str, Dict[str, List[str]]] = {}  # league -> prediction_type -> [model_ids]
        
        # Performance tracking
        self.performance_history: List[ModelPerformance] = []
        
        logger.info(f"üß† RevolutionaryModelArchitecture initialis√©e:")
        logger.info(f"   ‚Ä¢ {len(self.prediction_types)} types de pr√©dictions")
        logger.info(f"   ‚Ä¢ {len(self.leagues)} ligues")
        logger.info(f"   ‚Ä¢ {len(self.available_algorithms)} algorithmes")
        logger.info(f"   ‚Ä¢ Capacit√© max: {len(self.prediction_types) * len(self.leagues) * len(self.available_algorithms)} mod√®les")

    def _define_prediction_types(self) -> Dict[str, PredictionType]:
        """D√©finir les 30 types de pr√©dictions r√©volutionnaires"""
        
        predictions = {
            # === R√âSULTATS MATCH (9 pr√©dictions) ===
            'match_result_3way': PredictionType(
                name='match_result_3way', category='result', task_type='classification',
                target_column='match_result', classes=['Home', 'Draw', 'Away'],
                description="R√©sultat 1X2 classique", priority=1
            ),
            'double_chance_1X': PredictionType(
                name='double_chance_1X', category='result', task_type='classification',
                target_column='double_chance_1X', classes=[0, 1],
                description="Double chance domicile ou nul", priority=2
            ),
            'double_chance_12': PredictionType(
                name='double_chance_12', category='result', task_type='classification',
                target_column='double_chance_12', classes=[0, 1],
                description="Double chance domicile ou ext√©rieur", priority=2
            ),
            'double_chance_X2': PredictionType(
                name='double_chance_X2', category='result', task_type='classification',
                target_column='double_chance_X2', classes=[0, 1],
                description="Double chance nul ou ext√©rieur", priority=2
            ),
            'home_win': PredictionType(
                name='home_win', category='result', task_type='classification',
                target_column='home_win', classes=[0, 1],
                description="Victoire √©quipe domicile", priority=1
            ),
            'away_win': PredictionType(
                name='away_win', category='result', task_type='classification',
                target_column='away_win', classes=[0, 1],
                description="Victoire √©quipe ext√©rieur", priority=1
            ),
            'draw': PredictionType(
                name='draw', category='result', task_type='classification',
                target_column='draw', classes=[0, 1],
                description="Match nul", priority=2
            ),
            'home_win_margin': PredictionType(
                name='home_win_margin', category='result', task_type='regression',
                target_column='home_win_margin', min_value=-5, max_value=5,
                description="Marge de victoire domicile", priority=3
            ),
            'result_at_halftime': PredictionType(
                name='result_at_halftime', category='result', task_type='classification',
                target_column='result_ht', classes=['Home', 'Draw', 'Away'],
                description="R√©sultat √† la mi-temps", priority=2
            ),
            
            # === BUTS ET SCORES (12 pr√©dictions) ===
            'total_goals': PredictionType(
                name='total_goals', category='goals', task_type='regression',
                target_column='total_goals', min_value=0, max_value=10,
                description="Total buts du match", priority=1
            ),
            'home_goals': PredictionType(
                name='home_goals', category='goals', task_type='regression',
                target_column='home_goals', min_value=0, max_value=8,
                description="Buts √©quipe domicile", priority=1
            ),
            'away_goals': PredictionType(
                name='away_goals', category='goals', task_type='regression',
                target_column='away_goals', min_value=0, max_value=8,
                description="Buts √©quipe ext√©rieur", priority=1
            ),
            'over_0_5_goals': PredictionType(
                name='over_0_5_goals', category='goals', task_type='classification',
                target_column='over_0_5', classes=[0, 1],
                description="Plus de 0.5 buts", priority=3
            ),
            'over_1_5_goals': PredictionType(
                name='over_1_5_goals', category='goals', task_type='classification',
                target_column='over_1_5', classes=[0, 1],
                description="Plus de 1.5 buts", priority=2
            ),
            'over_2_5_goals': PredictionType(
                name='over_2_5_goals', category='goals', task_type='classification',
                target_column='over_2_5', classes=[0, 1],
                description="Plus de 2.5 buts", priority=1
            ),
            'over_3_5_goals': PredictionType(
                name='over_3_5_goals', category='goals', task_type='classification',
                target_column='over_3_5', classes=[0, 1],
                description="Plus de 3.5 buts", priority=2
            ),
            'under_2_5_goals': PredictionType(
                name='under_2_5_goals', category='goals', task_type='classification',
                target_column='under_2_5', classes=[0, 1],
                description="Moins de 2.5 buts", priority=2
            ),
            'both_teams_score': PredictionType(
                name='both_teams_score', category='goals', task_type='classification',
                target_column='btts', classes=[0, 1],
                description="Les deux √©quipes marquent", priority=1
            ),
            'goals_first_half': PredictionType(
                name='goals_first_half', category='goals', task_type='regression',
                target_column='goals_ht', min_value=0, max_value=6,
                description="Buts premi√®re mi-temps", priority=2
            ),
            'goals_second_half': PredictionType(
                name='goals_second_half', category='goals', task_type='regression',
                target_column='goals_2h', min_value=0, max_value=8,
                description="Buts seconde mi-temps", priority=3
            ),
            'exact_score_group': PredictionType(
                name='exact_score_group', category='goals', task_type='classification',
                target_column='score_group', classes=['0-0', '1-0', '1-1', '2-0', '2-1', '2-2', '3+'],
                description="Groupe de score exact", priority=3
            ),
            
            # === CARTONS ET √âV√âNEMENTS (5 pr√©dictions) ===
            'total_cards': PredictionType(
                name='total_cards', category='events', task_type='regression',
                target_column='total_cards', min_value=0, max_value=12,
                description="Total cartons du match", priority=2
            ),
            'over_3_5_cards': PredictionType(
                name='over_3_5_cards', category='events', task_type='classification',
                target_column='over_3_5_cards', classes=[0, 1],
                description="Plus de 3.5 cartons", priority=3
            ),
            'red_card': PredictionType(
                name='red_card', category='events', task_type='classification',
                target_column='red_card', classes=[0, 1],
                description="Carton rouge dans le match", priority=3
            ),
            'penalty_awarded': PredictionType(
                name='penalty_awarded', category='events', task_type='classification',
                target_column='penalty', classes=[0, 1],
                description="Penalty accord√©", priority=3
            ),
            'first_goal_time': PredictionType(
                name='first_goal_time', category='events', task_type='regression',
                target_column='first_goal_minute', min_value=1, max_value=90,
                description="Minute du premier but", priority=3
            ),
            
            # === CORNERS ET STATS (4 pr√©dictions) ===
            'total_corners': PredictionType(
                name='total_corners', category='events', task_type='regression',
                target_column='total_corners', min_value=0, max_value=20,
                description="Total corners du match", priority=2
            ),
            'over_9_5_corners': PredictionType(
                name='over_9_5_corners', category='events', task_type='classification',
                target_column='over_9_5_corners', classes=[0, 1],
                description="Plus de 9.5 corners", priority=3
            ),
            'corner_handicap': PredictionType(
                name='corner_handicap', category='events', task_type='classification',
                target_column='corner_handicap', classes=['Home', 'Away'],
                description="Handicap corners", priority=3
            ),
            'clean_sheet_home': PredictionType(
                name='clean_sheet_home', category='events', task_type='classification',
                target_column='clean_sheet_home', classes=[0, 1],
                description="Clean sheet √©quipe domicile", priority=2
            )
        }
        
        return predictions

    def create_league_specialist(self, league: str, prediction_type: str, algorithm: str = 'auto') -> str:
        """
        Cr√©er un mod√®le sp√©cialis√© pour une ligue et type de pr√©diction
        R√âVOLUTIONNAIRE: S√©lection automatique du meilleur algorithme
        """
        if league not in self.leagues:
            raise ValueError(f"Ligue non support√©e: {league}")
        
        if prediction_type not in self.prediction_types:
            raise ValueError(f"Type pr√©diction non support√©: {prediction_type}")
        
        # S√©lection algorithme automatique ou manuel
        if algorithm == 'auto':
            algorithm = self._select_best_algorithm(prediction_type, league)
        
        if algorithm not in self.available_algorithms:
            raise ValueError(f"Algorithme non support√©: {algorithm}")
        
        # Cr√©er ID unique du mod√®le
        model_id = f"{league}_{prediction_type}_{algorithm}"
        
        # Cr√©er l'instance du mod√®le
        model_class = self.available_algorithms[algorithm]
        pred_type = self.prediction_types[prediction_type]
        
        model = model_class(model_id, pred_type, league)
        
        # Stocker le mod√®le
        self.models[model_id] = model
        
        # Mettre √† jour les sp√©cialistes de ligue
        if league not in self.league_specialists:
            self.league_specialists[league] = {}
        if prediction_type not in self.league_specialists[league]:
            self.league_specialists[league][prediction_type] = []
        
        self.league_specialists[league][prediction_type].append(model_id)
        
        logger.info(f"üéØ Mod√®le sp√©cialis√© cr√©√©: {model_id}")
        return model_id

    def _select_best_algorithm(self, prediction_type: str, league: str) -> str:
        """
        S√©lection intelligente du meilleur algorithme
        INNOVATION: Bas√©e sur le type de pr√©diction et contexte ligue
        """
        pred_type = self.prediction_types[prediction_type]
        
        # Strat√©gies par cat√©gorie
        if pred_type.category == 'result':
            if pred_type.task_type == 'classification':
                return 'XGBoost'  # Excellent pour classification multiclasse
            else:
                return 'LightGBM'  # Rapide pour r√©gression
        
        elif pred_type.category == 'goals':
            if 'over_' in prediction_type or 'under_' in prediction_type:
                return 'XGBoost'  # Optimal pour seuils
            elif pred_type.task_type == 'regression':
                return 'LightGBM'  # Pr√©cis pour pr√©diction buts
            else:
                return 'RandomForest'  # Robuste pour classification binaire
        
        elif pred_type.category == 'events':
            return 'RandomForest'  # Bon avec features √©parses
        
        else:  # D√©faut
            return 'XGBoost'

    def create_full_league_ensemble(self, league: str, priority_only: bool = True) -> List[str]:
        """
        Cr√©er ensemble complet de mod√®les pour une ligue
        R√âVOLUTIONNAIRE: 30 mod√®les sp√©cialis√©s par ligue
        """
        logger.info(f"üèóÔ∏è Cr√©ation ensemble complet pour {league}")
        
        created_models = []
        predictions_to_create = self.prediction_types.items()
        
        # Filtrer par priorit√© si demand√©
        if priority_only:
            predictions_to_create = [(name, pred) for name, pred in predictions_to_create if pred.priority == 1]
            logger.info(f"üìä Cr√©ation priorit√© 1 seulement: {len(predictions_to_create)} pr√©dictions")
        
        for pred_name, pred_type in predictions_to_create:
            try:
                model_id = self.create_league_specialist(league, pred_name, 'auto')
                created_models.append(model_id)
            except Exception as e:
                logger.error(f"‚ùå Erreur cr√©ation {league}_{pred_name}: {e}")
        
        logger.info(f"‚úÖ {len(created_models)} mod√®les cr√©√©s pour {league}")
        return created_models

    def create_all_leagues_ensemble(self, priority_only: bool = True) -> Dict[str, List[str]]:
        """
        Cr√©er tous les ensembles de mod√®les pour toutes les ligues
        ARCHITECTURE COMPL√àTE: 6 ligues √ó 30 pr√©dictions
        """
        logger.info("üöÄ CR√âATION ARCHITECTURE COMPL√àTE - TOUS MOD√àLES")
        
        all_models = {}
        total_created = 0
        
        for league in self.leagues.keys():
            logger.info(f"üèÜ Traitement ligue: {league}")
            league_models = self.create_full_league_ensemble(league, priority_only)
            all_models[league] = league_models
            total_created += len(league_models)
        
        logger.info(f"üéâ ARCHITECTURE TERMIN√âE:")
        logger.info(f"   ‚Ä¢ {len(all_models)} ligues √©quip√©es")
        logger.info(f"   ‚Ä¢ {total_created} mod√®les cr√©√©s au total")
        logger.info(f"   ‚Ä¢ Pr√™t pour entra√Ænement massif")
        
        return all_models

    def get_model(self, model_id: str) -> Optional[BaseMLModel]:
        """R√©cup√©rer un mod√®le par ID"""
        return self.models.get(model_id)

    def get_league_specialists(self, league: str, prediction_type: str) -> List[BaseMLModel]:
        """R√©cup√©rer tous les mod√®les sp√©cialis√©s pour une ligue et pr√©diction"""
        model_ids = self.league_specialists.get(league, {}).get(prediction_type, [])
        return [self.models[mid] for mid in model_ids if mid in self.models]

    def get_architecture_summary(self) -> Dict:
        """R√©sum√© complet de l'architecture"""
        # Statistiques par ligue
        league_stats = {}
        for league, specialists in self.league_specialists.items():
            total_models = sum(len(models) for models in specialists.values())
            trained_models = sum(
                1 for model_list in specialists.values() 
                for model_id in model_list 
                if self.models[model_id].is_trained
            )
            league_stats[league] = {
                'total_models': total_models,
                'trained_models': trained_models,
                'predictions_covered': len(specialists)
            }
        
        # Statistiques par algorithme
        algo_stats = {}
        for model_id, model in self.models.items():
            algo = model.__class__.__name__
            if algo not in algo_stats:
                algo_stats[algo] = {'total': 0, 'trained': 0}
            algo_stats[algo]['total'] += 1
            if model.is_trained:
                algo_stats[algo]['trained'] += 1
        
        return {
            'architecture_version': '2.0.0-Revolutionary',
            'total_models': len(self.models),
            'total_leagues': len(self.leagues),
            'total_prediction_types': len(self.prediction_types),
            'trained_models': sum(1 for m in self.models.values() if m.is_trained),
            'league_statistics': league_stats,
            'algorithm_statistics': algo_stats,
            'available_algorithms': list(self.available_algorithms.keys()),
            'supported_leagues': list(self.leagues.keys()),
            'prediction_categories': {
                cat: len([p for p in self.prediction_types.values() if p.category == cat])
                for cat in set(p.category for p in self.prediction_types.values())
            }
        }

    def save_architecture(self, output_dir: Path = None) -> None:
        """Sauvegarder toute l'architecture"""
        if output_dir is None:
            output_dir = config.MODELS_DIR / "revolutionary_architecture"
        
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # Sauvegarder chaque mod√®le
        for model_id, model in self.models.items():
            model_file = output_dir / f"{model_id}.joblib"
            model.save_model(model_file)
        
        # Sauvegarder m√©tadonn√©es architecture
        metadata = {
            'architecture_summary': self.get_architecture_summary(),
            'league_specialists': self.league_specialists,
            'prediction_types': {name: {
                'name': pt.name,
                'category': pt.category,
                'task_type': pt.task_type,
                'target_column': pt.target_column,
                'classes': pt.classes,
                'description': pt.description,
                'priority': pt.priority
            } for name, pt in self.prediction_types.items()},
            'leagues': self.leagues,
            'save_timestamp': datetime.now().isoformat()
        }
        
        metadata_file = output_dir / "architecture_metadata.joblib"
        joblib.dump(metadata, metadata_file)
        
        logger.info(f"üíæ Architecture sauvegard√©e dans {output_dir}")
        logger.info(f"   ‚Ä¢ {len(self.models)} mod√®les")
        logger.info(f"   ‚Ä¢ M√©tadonn√©es compl√®tes")

# Factory et utilitaires
def create_revolutionary_architecture() -> RevolutionaryModelArchitecture:
    """Factory pour cr√©er l'architecture r√©volutionnaire"""
    return RevolutionaryModelArchitecture()

if __name__ == "__main__":
    # D√©monstration architecture
    logger.info("üß™ Test RevolutionaryModelArchitecture")
    
    # Cr√©er architecture
    arch = create_revolutionary_architecture()
    
    # Cr√©er mod√®les pour une ligue (test)
    test_models = arch.create_full_league_ensemble('Premier_League', priority_only=True)
    
    logger.info(f"‚úÖ Test r√©ussi:")
    logger.info(f"   ‚Ä¢ Architecture cr√©√©e")
    logger.info(f"   ‚Ä¢ {len(test_models)} mod√®les Premier League")
    
    # R√©sum√©
    summary = arch.get_architecture_summary()
    logger.info(f"üìä R√©sum√©: {summary['total_models']} mod√®les, {summary['total_prediction_types']} types")